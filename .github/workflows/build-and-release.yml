name: Build and Release

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main ]
  push:
    branches: [ main ]

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    name: Build Windows Executable
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for proper versioning
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r deployment/requirements-build.txt
    
    - name: Get version from git tags
      id: get_version
      run: |
        # Get version from backend/version.py as the source of truth
        $fileVersion = "1.0.0"  # Default fallback
        if (Test-Path "backend/version.py") {
          $versionContent = Get-Content "backend/version.py" | Select-String -Pattern '__version__\s*=\s*[''"]([^''"]+)[''"]'
          if ($versionContent) {
            $fileVersion = $versionContent.Matches.Groups[1].Value
            Write-Host "Found version in backend/version.py: $fileVersion"
          }
        }
        
        # Also check latest git tag for reference
        $gitVersion = git describe --tags --abbrev=0 2>$null
        if ($LASTEXITCODE -eq 0 -and $gitVersion) {
          $gitVersion = $gitVersion -replace '^v', ''
          Write-Host "Latest git tag version: $gitVersion"
        }
        
        # Use the version from backend/version.py as the authoritative source
        $version = $fileVersion
        Write-Host "Using version: $version"
        
        # Update backend/version.py to ensure it's consistent
        @"
        # Auto-generated version file
        # This file is automatically updated during the build process
        __version__ = "$version"
        "@ | Set-Content -Path "backend/version.py"
        Write-Host "Updated backend/version.py with version: $version"
        
        # Export version for later steps
        echo "app_version=$version" >> $env:GITHUB_OUTPUT
        echo "VITE_APP_VERSION=$version" >> $env:GITHUB_ENV
      shell: powershell
    
    - name: Create .env file for build
      run: |
        echo "TWITCH_CLIENT_ID=${{ secrets.TWITCH_CLIENT_ID }}" > .env
        echo "TWITCH_CLIENT_SECRET=${{ secrets.TWITCH_CLIENT_SECRET }}" >> .env
        echo "YOUTUBE_CLIENT_ID=${{ secrets.YOUTUBE_CLIENT_ID }}" >> .env
        echo "YOUTUBE_CLIENT_SECRET=${{ secrets.YOUTUBE_CLIENT_SECRET }}" >> .env
        echo "VITE_APP_VERSION=${{ steps.get_version.outputs.app_version }}" >> .env
      shell: bash
    
    - name: Build frontend
      working-directory: ./frontend
      run: |
        npm install
        npm run build
      env:
        VITE_APP_VERSION: ${{ steps.get_version.outputs.app_version }}
    
    - name: Run build script
      run: python deployment/build.py
      env:
        TWITCH_CLIENT_ID: ${{ secrets.TWITCH_CLIENT_ID }}
        TWITCH_CLIENT_SECRET: ${{ secrets.TWITCH_CLIENT_SECRET }}
        YOUTUBE_CLIENT_ID: ${{ secrets.YOUTUBE_CLIENT_ID }}
        YOUTUBE_CLIENT_SECRET: ${{ secrets.YOUTUBE_CLIENT_SECRET }}
        VITE_APP_VERSION: ${{ steps.get_version.outputs.app_version }}
    
    - name: Verify executable exists
      run: |
        if (!(Test-Path "dist/ChatYapper.exe")) {
          Write-Error "Build failed: ChatYapper.exe not found in dist directory"
          exit 1
        }
        Write-Host "[SUCCESS] Build successful: ChatYapper.exe found"
        $size = (Get-Item "dist/ChatYapper.exe").Length / 1MB
        Write-Host "Executable size: $([math]::Round($size, 2)) MB"
      shell: powershell
    
    - name: Install WiX Toolset v4
      run: |
        Write-Host "Installing WiX Toolset v4..."
        dotnet tool install --global wix
        
        # Ensure WiX is in PATH
        $env:PATH = "$env:USERPROFILE\.dotnet\tools;$env:PATH"
        
        Write-Host "Verifying WiX installation..."
        wix --version
        
        Write-Host "Installing WiX UI extension globally..."
        wix extension add --global WixToolset.UI.wixext
        
        Write-Host "Verifying UI extension..."
        wix extension list
        wix extension list --global
        
        Write-Host "WiX installation complete"
      shell: powershell
    
    - name: Generate installer images
      run: |
        Write-Host "Generating custom installer images..."
        pip install pillow
        python deployment/create_installer_images.py
      shell: powershell
    
    - name: Build MSI Installer
      run: python deployment/build_msi.py
      env:
        VITE_APP_VERSION: ${{ steps.get_version.outputs.app_version }}
    
    - name: Verify MSI exists
      id: msi_info
      run: |
        $msiPath = Get-ChildItem -Path "dist/msi" -Filter "*.msi" | Select-Object -First 1
        if (!$msiPath) {
          Write-Error "MSI build failed: No .msi file found in dist/msi directory"
          exit 1
        }
        Write-Host "[SUCCESS] MSI build successful: $($msiPath.Name) found"
        $size = $msiPath.Length / 1MB
        Write-Host "MSI size: $([math]::Round($size, 2)) MB"
        
        # Store MSI info for later steps
        echo "msi_path=$($msiPath.FullName)" >> $env:GITHUB_OUTPUT
        echo "msi_name=$($msiPath.Name)" >> $env:GITHUB_OUTPUT
      shell: powershell
    
    - name: Get version info
      id: version
      run: |
        $appVersion = "${{ steps.get_version.outputs.app_version }}"
        $shortSha = "${{ github.sha }}".Substring(0, 7)
        
        # Check if this is a merge to main
        if ("${{ github.event_name }}" -eq "push" -and "${{ github.ref }}" -eq "refs/heads/main") {
          # This is a push to main (after merge) - use app version as tag
          $version = "v$appVersion"
          echo "version=$version" >> $env:GITHUB_OUTPUT
          echo "is_release=true" >> $env:GITHUB_OUTPUT
          Write-Host "Release version: $version"
        } else {
          # This is a PR build - include build info
          $date = Get-Date -Format "yyyy.MM.dd"
          $version = "build-v$appVersion-$date-$shortSha"
          echo "version=$version" >> $env:GITHUB_OUTPUT
          echo "is_release=false" >> $env:GITHUB_OUTPUT
          Write-Host "PR build version: $version"
        }
      shell: powershell
    
    - name: Upload artifact for PR
      if: github.event_name == 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: ChatYapper-${{ steps.version.outputs.version }}
        path: |
          dist/ChatYapper.exe
          dist/msi/*.msi
        retention-days: 7
    
    - name: Comment PR with build status
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          const exeStats = fs.statSync('dist/ChatYapper.exe');
          const exeSizeMB = (exeStats.size / (1024 * 1024)).toFixed(2);
          
          // Find MSI file
          const msiDir = 'dist/msi';
          const msiFiles = fs.readdirSync(msiDir).filter(f => f.endsWith('.msi'));
          const msiFile = msiFiles.length > 0 ? msiFiles[0] : null;
          const msiStats = msiFile ? fs.statSync(path.join(msiDir, msiFile)) : null;
          const msiSizeMB = msiStats ? (msiStats.size / (1024 * 1024)).toFixed(2) : 'N/A';
          
          const comment = `## âœ… Build Successful
          
          **Executable:** \`ChatYapper.exe\` (${exeSizeMB} MB)
          **MSI Installer:** \`${msiFile || 'Not found'}\` (${msiSizeMB} MB)
          **App Version:** \`${{ steps.get_version.outputs.app_version }}\`
          **Build ID:** \`${{ steps.version.outputs.version }}\`
          **Commit:** ${{ github.sha }}
          
          Both the standalone executable and MSI installer have been built and are ready for testing.
          Download the artifacts from the workflow run to test before merging.
          
          Once merged to \`main\`, an official release will be created automatically with tag \`v${{ steps.get_version.outputs.app_version }}\`.`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    - name: Create Release (on merge to main)
      if: steps.version.outputs.is_release == 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Chat Yapper ${{ steps.version.outputs.version }}
        body: |
          ## Chat Yapper ${{ steps.version.outputs.version }}
          
          ### What's Changed
          This release was automatically created from the latest merge to main.
          
          **Version:** ${{ steps.get_version.outputs.app_version }}
          **Commit:** ${{ github.sha }}
          **Build Date:** ${{ github.event.head_commit.timestamp }}
          
          ### Download
          Choose one of the following installation methods:
          
          #### MSI Installer (Recommended)
          - Download `${{ steps.msi_info.outputs.msi_name }}` for a traditional Windows installation
          - Double-click to install to Program Files
          - Creates Start Menu and Desktop shortcuts
          - Easily uninstall via Windows Settings
          
          #### Standalone Executable
          - Download `ChatYapper.exe` for a portable version
          - No installation required
          - Run directly from any location
          
          ### Installation
          
          **MSI Installer:**
          1. Download the `.msi` file below
          2. Double-click to run the installer
          3. Follow the installation wizard
          4. Launch from Start Menu or Desktop shortcut
          
          **Standalone Executable:**
          1. Download `ChatYapper.exe`
          2. Run the executable
          3. The application will start on `http://localhost:8008`
          
          ### System Requirements
          - Windows 10 or later
          - No additional dependencies required (all bundled)
          
          ### Support
          - **Issues:** https://github.com/${{ github.repository }}/issues
          - **Discussions:** https://github.com/${{ github.repository }}/discussions
        files: |
          dist/ChatYapper.exe
          ${{ steps.msi_info.outputs.msi_path }}
        draft: false
        prerelease: false
    
    - name: Notify release created
      if: steps.version.outputs.is_release == 'true'
      run: |
        Write-Host "Release created successfully!"
        Write-Host "Version: ${{ steps.version.outputs.version }}"
        Write-Host "View at: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }}"
      shell: powershell

  # This job runs after build and prevents merge if build failed
  build-status-check:
    name: Build Status Check
    runs-on: ubuntu-latest
    needs: build
    if: always()
    
    steps:
    - name: Check build status
      run: |
        if [ "${{ needs.build.result }}" != "success" ]; then
          echo "[FAIL] Build failed or was cancelled"
          echo "Cannot merge to main until build succeeds"
          exit 1
        fi
        echo "[PASS] Build succeeded - safe to merge"
